<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <parent>
    <artifactId>policy</artifactId>
    <groupId>com.dzz</groupId>
    <version>1.0.0-SNAPSHOT</version>
  </parent>
  <modelVersion>4.0.0</modelVersion>
  <artifactId>policy-service</artifactId>
  <description>policy接口服务</description>

  <properties>
    <targetJavaProject>${basedir}/src/main/java</targetJavaProject>
    <targetResourcesProject>${basedir}/src/main/resources/</targetResourcesProject>
    <targetXMLPackage>mapper</targetXMLPackage>

    <swagger2markup.version>1.3.1</swagger2markup.version>
    <swagger2markup.plugin.version>1.3.3</swagger2markup.plugin.version>
    <swagger2markup.extension.version>1.3.1</swagger2markup.extension.version>
    <asciidoctorj.version>1.5.5</asciidoctorj.version>
    <asciidoctorj.pdf.version>1.5.0-alpha.15</asciidoctorj.pdf.version>
    <jruby.version>9.1.8.0</jruby.version>
    <asciidoctor.input.directory>${project.basedir}/src/docs/asciidoc</asciidoctor.input.directory>
    <swagger.output.dir>${project.build.directory}/swagger</swagger.output.dir>
    <generated.asciidoc.directory>${project.build.directory}/asciidoc/generated</generated.asciidoc.directory>
    <asciidoctor.html.output.directory>${project.build.directory}/asciidoc/html</asciidoctor.html.output.directory>
    <asciidoctor.pdf.output.directory>${project.build.directory}/asciidoc/pdf</asciidoctor.pdf.output.directory>
    <swagger.input>http://localhost:7002/v2/api-docs</swagger.input>
  </properties>

  <dependencies>

    <dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-starter-web</artifactId>
      <exclusions>
        <exclusion>
          <groupId>org.springframework.boot</groupId>
          <artifactId>spring-boot-starter-tomcat</artifactId>
        </exclusion>
      </exclusions>
    </dependency>

    <dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-starter-undertow</artifactId>
    </dependency>


    <dependency>
      <groupId>org.springframework.cloud</groupId>
      <artifactId>spring-cloud-starter-netflix-eureka-client</artifactId>
    </dependency>

    <dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-starter-security</artifactId>
    </dependency>

    <dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-starter-oauth2-resource-server</artifactId>
    </dependency>

    <dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-starter-oauth2-client</artifactId>
    </dependency>

    <dependency>
      <groupId>org.springframework.security.oauth.boot</groupId>
      <artifactId>spring-security-oauth2-autoconfigure</artifactId>
    </dependency>

    <dependency>
      <groupId>org.springframework.security</groupId>
      <artifactId>spring-security-jwt</artifactId>
      <version>1.0.10.RELEASE</version>
    </dependency>

    <dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-starter-actuator</artifactId>
    </dependency>

    <dependency>
      <groupId>org.mybatis.spring.boot</groupId>
      <artifactId>mybatis-spring-boot-starter</artifactId>
    </dependency>

    <dependency>
      <groupId>com.alibaba</groupId>
      <artifactId>druid-spring-boot-starter</artifactId>
    </dependency>

    <dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-starter-jdbc</artifactId>
    </dependency>

    <dependency>
      <groupId>mysql</groupId>
      <artifactId>mysql-connector-java</artifactId>
    </dependency>

    <dependency>
      <groupId>tk.mybatis</groupId>
      <artifactId>mapper-spring-boot-starter</artifactId>
    </dependency>

    <dependency>
      <groupId>com.github.pagehelper</groupId>
      <artifactId>pagehelper-spring-boot-starter</artifactId>
    </dependency>

    <dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-starter-aop</artifactId>
    </dependency>

    <dependency>
      <groupId>org.aspectj</groupId>
      <artifactId>aspectjweaver</artifactId>
    </dependency>

    <dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-starter-test</artifactId>
    </dependency>

    <dependency>
      <groupId>io.springfox</groupId>
      <artifactId>springfox-swagger2</artifactId>
    </dependency>

    <dependency>
      <groupId>io.springfox</groupId>
      <artifactId>springfox-swagger-ui</artifactId>
    </dependency>

    <dependency>
      <groupId>org.projectlombok</groupId>
      <artifactId>lombok</artifactId>
    </dependency>

    <dependency>
      <groupId>com.dzz</groupId>
      <artifactId>policy-api</artifactId>
      <version>1.0.0-SNAPSHOT</version>
    </dependency>

    <dependency>
      <groupId>com.dzz</groupId>
      <artifactId>util</artifactId>
      <version>1.0.0-SNAPSHOT</version>
    </dependency>

    <dependency>
      <groupId>com.alibaba</groupId>
      <artifactId>fastjson</artifactId>
    </dependency>


  </dependencies>


  <build>
    <finalName>${project.artifactId}</finalName>
    <plugins>
      <plugin>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-maven-plugin</artifactId>
      </plugin>

      <plugin>
        <groupId>org.mybatis.generator</groupId>
        <artifactId>mybatis-generator-maven-plugin</artifactId>
        <version>1.3.7</version>
        <dependencies>
          <dependency>
            <groupId>mysql</groupId>
            <artifactId>mysql-connector-java</artifactId>
            <version>8.0.28</version>
          </dependency>
          <dependency>
            <groupId>tk.mybatis</groupId>
            <artifactId>mapper</artifactId>
            <version>4.0.4</version>
          </dependency>
        </dependencies>
        <configuration>
          <overwrite>true</overwrite>
          <verbose>true</verbose>
          <configurationFile>${basedir}/src/main/resources/generator/generatorConfig.xml</configurationFile>
        </configuration>
      </plugin>

      <plugin>
        <groupId>io.github.swagger2markup</groupId>
        <artifactId>swagger2markup-maven-plugin</artifactId>
        <version>${swagger2markup.plugin.version}</version>
        <dependencies>
          <dependency>
            <groupId>io.github.swagger2markup</groupId>
            <artifactId>swagger2markup-import-files-ext</artifactId>
            <version>${swagger2markup.extension.version}</version>
          </dependency>
          <dependency>
            <groupId>io.github.swagger2markup</groupId>
            <artifactId>swagger2markup</artifactId>
            <version>${swagger2markup.version}</version>
          </dependency>
        </dependencies>
        <configuration>
          <swaggerInput>${swagger.input}</swaggerInput>
          <outputDir>${generated.asciidoc.directory}</outputDir>
          <config>
            <swagger2markup.markupLanguage>MARKDOWN</swagger2markup.markupLanguage>
            <swagger2markup.pathsGroupedBy>TAGS</swagger2markup.pathsGroupedBy>
            <swagger2markup.extensions.dynamicOverview.contentPath>${project.basedir}/src/docs/asciidoc/extensions/overview</swagger2markup.extensions.dynamicOverview.contentPath>
            <swagger2markup.extensions.dynamicDefinitions.contentPath>${project.basedir}/src/docs/asciidoc/extensions/definitions</swagger2markup.extensions.dynamicDefinitions.contentPath>
            <swagger2markup.extensions.dynamicPaths.contentPath>${project.basedir}/src/docs/asciidoc/extensions/paths</swagger2markup.extensions.dynamicPaths.contentPath>
            <swagger2markup.extensions.dynamicSecurity.contentPath>${project.basedir}src/docs/asciidoc/extensions/security</swagger2markup.extensions.dynamicSecurity.contentPath>
          </config>
        </configuration>
        <executions>
          <execution>
            <phase>generate-sources</phase>
            <goals>
              <goal>convertSwagger2markup</goal>
            </goals>
          </execution>
        </executions>
      </plugin>

      <!-- Run the generated asciidoc through Asciidoctor to generate
           other documentation types, such as PDFs or HTML5 -->
<!--      <plugin>-->
<!--        <groupId>org.asciidoctor</groupId>-->
<!--        <artifactId>asciidoctor-maven-plugin</artifactId>-->
<!--        <version>1.5.5</version>-->
<!--        &lt;!&ndash; Include Asciidoctor PDF for pdf generation &ndash;&gt;-->
<!--        <dependencies>-->
<!--          <dependency>-->
<!--            <groupId>org.asciidoctor</groupId>-->
<!--            <artifactId>asciidoctorj-pdf</artifactId>-->
<!--            <version>${asciidoctorj.pdf.version}</version>-->
<!--          </dependency>-->
<!--          &lt;!&ndash; Comment this section to use the default jruby artifact provided by the plugin &ndash;&gt;-->
<!--          <dependency>-->
<!--            <groupId>org.jruby</groupId>-->
<!--            <artifactId>jruby-complete</artifactId>-->
<!--            <version>${jruby.version}</version>-->
<!--          </dependency>-->
<!--          &lt;!&ndash; Comment this section to use the default AsciidoctorJ artifact provided by the plugin &ndash;&gt;-->
<!--          <dependency>-->
<!--            <groupId>org.asciidoctor</groupId>-->
<!--            <artifactId>asciidoctorj</artifactId>-->
<!--            <version>${asciidoctorj.version}</version>-->
<!--          </dependency>-->
<!--        </dependencies>-->
<!--        &lt;!&ndash; Configure generic document generation settings &ndash;&gt;-->
<!--        <configuration>-->
<!--          <sourceDirectory>${asciidoctor.input.directory}</sourceDirectory>-->
<!--          <sourceDocumentName>index.adoc</sourceDocumentName>-->
<!--          <attributes>-->
<!--            <doctype>book</doctype>-->
<!--            <toc>left</toc>-->
<!--            <toclevels>3</toclevels>-->
<!--            <numbered></numbered>-->
<!--            <hardbreaks></hardbreaks>-->
<!--            <sectlinks></sectlinks>-->
<!--            <sectanchors></sectanchors>-->
<!--            <generated>${generated.asciidoc.directory}</generated>-->
<!--          </attributes>-->
<!--        </configuration>-->
<!--        &lt;!&ndash; Since each execution can only handle one backend, run-->
<!--             separate executions for each desired output type &ndash;&gt;-->
<!--        <executions>-->
<!--          <execution>-->
<!--            <id>output-html</id>-->
<!--            <phase>generate-resources</phase>-->
<!--            <goals>-->
<!--              <goal>process-asciidoc</goal>-->
<!--            </goals>-->
<!--            <configuration>-->
<!--              <backend>html5</backend>-->
<!--              <outputDirectory>${asciidoctor.html.output.directory}</outputDirectory>-->
<!--            </configuration>-->
<!--          </execution>-->

<!--          <execution>-->
<!--            <id>output-pdf</id>-->
<!--            <phase>generate-resources</phase>-->
<!--            <goals>-->
<!--              <goal>process-asciidoc</goal>-->
<!--            </goals>-->
<!--            <configuration>-->
<!--              <backend>pdf</backend>-->
<!--              <outputDirectory>${asciidoctor.pdf.output.directory}</outputDirectory>-->
<!--            </configuration>-->
<!--          </execution>-->
<!--        </executions>-->
<!--      </plugin>-->

    </plugins>
  </build>
</project>